<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScintillaNet</name>
    </assembly>
    <members>
        <member name="F:ScintillaNet.SnippetChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ScintillaNet.SnippetChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ScintillaNet.SnippetChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ScintillaNet.TopLevelHelper">
            <summary>
            Top level ScintillaHelpers Like Style and Folding inherit from this class so they don't have
            to reimplement the same Equals method
            </summary>
        </member>
        <member name="M:ScintillaNet.ScintillaHelperBase.Equals(System.Object)">
            <summary>
            Abstract Equals Override. All Helpers must implement this. Use IsSameHelperFamily to
            determine if the types are compatible and they have the same Scintilla. For most top 
            level helpers like Caret and Lexing this should be enough. Helpers like Marker and
            Line also need to take other variables into consideration.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.ScintillaHelperBase.IsSameHelperFamily(System.Object)">
            <summary>
            Determines if obj belongs to the same Scintilla and is of compatible type
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ScintillaNet.Commands">
            <summary>
            Manages commands, which are actions in ScintillaNET that can be bound to key combinations.
            </summary>
        </member>
        <member name="M:ScintillaNet.Commands.AddBinding(System.Windows.Forms.Keys,System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Adds a key combination to a Command
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.AddBinding(System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Adds a key combination to a Command
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.AddBinding(System.Char,ScintillaNet.BindableCommand)">
            <summary>
            Adds a key combination to a Command
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.AddBinding(System.Char,System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Adds a key combination to a Command
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Windows.Forms.Keys,System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Removes a keyboard shortcut / command combination
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Removes a keyboard shortcut / command combination
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Char,ScintillaNet.BindableCommand)">
            <summary>
            Removes a keyboard shortcut / command combination
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Char,System.Windows.Forms.Keys,ScintillaNet.BindableCommand)">
            <summary>
            Removes a keyboard shortcut / command combination
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Removes all commands bound to a  keyboard shortcut
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Windows.Forms.Keys)">
            <summary>
            Removes all commands bound to a  keyboard shortcut
            </summary>
            <param name="shortcut">Key to trigger command</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Char)">
            <summary>
            Removes all commands bound to a  keyboard shortcut
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveBinding(System.Char,System.Windows.Forms.Keys)">
            <summary>
            Removes all commands bound to a  keyboard shortcut
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
        </member>
        <member name="M:ScintillaNet.Commands.RemoveAllBindings">
            <summary>
            Removes all key command bindings
            </summary>
            <remarks>
            Performing this action will make ScintillaNET virtually unusable until you assign new command bindings.
            This removes even basic functionality like arrow keys, common clipboard commands, home/end, etc.
            </remarks>
        </member>
        <member name="M:ScintillaNet.Commands.GetCommands(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Returns a list of Commands bound to a keyboard shortcut
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <returns>List of Commands bound to a keyboard shortcut</returns>
        </member>
        <member name="M:ScintillaNet.Commands.GetCommands(System.Windows.Forms.Keys)">
            <summary>
            Returns a list of Commands bound to a keyboard shortcut
            </summary>
            <param name="shortcut">Key to trigger command</param>
            <returns>List of Commands bound to a keyboard shortcut</returns>
        </member>
        <member name="M:ScintillaNet.Commands.GetCommands(System.Char)">
            <summary>
            Returns a list of Commands bound to a keyboard shortcut
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <returns>List of Commands bound to a keyboard shortcut</returns>
        </member>
        <member name="M:ScintillaNet.Commands.GetCommands(System.Char,System.Windows.Forms.Keys)">
            <summary>
            Returns a list of Commands bound to a keyboard shortcut
            </summary>
            <param name="shortcut">Character corresponding to a (keyboard) key to trigger command</param>
            <param name="modifiers">Shift, alt, ctrl</param>
            <returns>List of Commands bound to a keyboard shortcut</returns>
        </member>
        <member name="M:ScintillaNet.Commands.GetKeyBindings(ScintillaNet.BindableCommand)">
            <summary>
            Returns a list of KeyBindings bound to a given command
            </summary>
            <param name="command">Command to execute</param>
            <returns>List of KeyBindings bound to the given command</returns>
        </member>
        <member name="M:ScintillaNet.Commands.Execute(ScintillaNet.BindableCommand)">
            <summary>
            Executes a Command
            </summary>
            <param name="command">Any <see cref="T:ScintillaNet.BindableCommand"/></param>
            <returns>Value to indicate whether other bound commands should continue to execute</returns>
        </member>
        <member name="P:ScintillaNet.Commands.AllowDuplicateBindings">
            <summary>
            Gets/Sets if a key combination can be bound to more than one command. (default is true)
            </summary>
            <remarks>
            When set to false only the first command bound to a key combination is kept.
            Subsequent requests are ignored. 
            </remarks>
        </member>
        <member name="T:ScintillaNet.KeyBinding">
            <summary>
            Represents the Binding Combination of a Keyboard Key + Modifiers
            </summary>
        </member>
        <member name="M:ScintillaNet.KeyBinding.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Initializes a new instance of the KeyBinding structure.
            </summary>
            <param name="keycode">Key to trigger command</param>
            <param name="modifiers"> key modifiers to the Keyboard shortcut</param>
        </member>
        <member name="M:ScintillaNet.KeyBinding.ToString">
            <summary>
            Overriden. Returns string representation of the Keyboard shortcut
            </summary>
            <returns>Returns string representation of the Keyboard shortcut</returns>
        </member>
        <member name="M:ScintillaNet.KeyBinding.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns>Hashcode of ToString()</returns>
        </member>
        <member name="M:ScintillaNet.KeyBinding.Equals(System.Object)">
            <summary>
            Overriden.
            </summary>
            <param name="obj">Another KeyBinding struct</param>
            <returns>True if the Keycode and Modifiers are equal</returns>
        </member>
        <member name="P:ScintillaNet.KeyBinding.KeyCode">
            <summary>
            Gets/Sets Key to trigger command
            </summary>
        </member>
        <member name="P:ScintillaNet.KeyBinding.Modifiers">
            <summary>
            Gets sets key modifiers to the Keyboard shortcut
            </summary>
        </member>
        <member name="T:XpmConverter">
            <summary>
            Converts Bitmap images to XPM data for use with ScintillaNet.
            Warning: images with more than (around) 50 colors will generate incorrect XPM
            The XpmConverter class was based on code from flashdevelop. 
            </summary>
        </member>
        <member name="F:XpmConverter.DefaultTransparentColor">
            <summary>
            The default transparent Color
            </summary>
        </member>
        <member name="M:XpmConverter.ConvertToXPM(System.Windows.Forms.ImageList)">
            <summary>
            cicles an image list object to convert contained images into xpm
            at the same time we add converted images into an arraylist that lets us to retrieve images later.
            Uses the DefaultTransparentColor.
            </summary>
            <param name="imageList">The image list to transform.</param>
            <returns></returns>
        </member>
        <member name="M:XpmConverter.ConvertToXPM(System.Windows.Forms.ImageList,System.String)">
            <summary>
            cicles an image list object to convert contained images into xpm
            at the same time we add converted images into an arraylist that lets us to retrieve images later	
            </summary>
            <param name="imageList">The image list to transform.</param>
            <param name="transparentColor">The overriding transparent Color</param>
            <returns></returns>
        </member>
        <member name="M:XpmConverter.ConvertToXPM(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap images to XPM data for use with ScintillaNet.
            Warning: images with more than (around) 50 colors will generate incorrect XPM.
            Uses the DefaultTransparentColor.
            </summary>
            <param name="bmp">The image to transform.</param>
            <returns></returns>
        </member>
        <member name="M:XpmConverter.ConvertToXPM(System.Drawing.Bitmap,System.String)">
            <summary>
            Converts Bitmap images to XPM data for use with ScintillaNet.
            Warning: images with more than (around) 50 colors will generate incorrect XPM
            tColor: specified transparent color in format: "#00FF00".
            </summary>
            <param name="bmp">The image to transform.</param>
            <param name="transparentColor">The overriding transparent Color</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Utilities.ColorToHtml(System.Drawing.Color)">
            <summary>
            Returns an HTML #XXXXXX format for a color. Unlike the ColorTranslator class it
            never returns named colors.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Utilities.IntPtrToString(System.Text.Encoding,System.IntPtr,System.Int32)">
            <summary>
            Marshals an IntPtr pointing to un unmanaged byte[] to a .NET String using the given Encoding.
            </summary>
            <remarks>
            I'd love to have this as en extension method but ScintillaNet's probably going to be 2.0 for a long
            time to come. There's nothing really compelling in later versions that applies to ScintillaNet that
            can't be done with a 2.0 construct (extension methods, linq, etc)
            </remarks>
            <param name="encoding"></param>
            <param name="ptr"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:ScintillaNet.EndOfLine">
            <summary>
            Manages End of line settings for the Scintilla Control
            </summary>
        </member>
        <member name="M:ScintillaNet.EndOfLine.ConvertAllLines(ScintillaNet.EndOfLineMode)">
            <summary>
            Converts all lines in the document to the given mode.
            </summary>
            <param name="toMode">The EndOfLineMode to convert all lines to </param>
        </member>
        <member name="P:ScintillaNet.EndOfLine.ConvertOnPaste">
            <summary>
            Gets/Sets whether pasted content's line endings should be changed to match
            the current document's settings.
            </summary>
        </member>
        <member name="P:ScintillaNet.EndOfLine.Mode">
            <summary>
            Gets/Sets the <see cref="T:ScintillaNet.EndOfLineMode"/> for the document. Default is CrLf.
            </summary>
        </member>
        <member name="P:ScintillaNet.EndOfLine.IsVisible">
            <summary>
            Gets/Sets if End of line markers are visible in the Scintilla control.
            </summary>
        </member>
        <member name="T:ScintillaNet.Range">
            <summary>
            A range within the editor. Start and End are both Positions.
            </summary>
        </member>
        <member name="M:ScintillaNet.Range.StripTrailingSpaces">
            <summary>
            Removes trailing spaces from each line
            </summary>
        </member>
        <member name="M:ScintillaNet.Range.ExpandAllFolds">
            <summary>
            Expands all folds
            </summary>
        </member>
        <member name="M:ScintillaNet.Range.CollapseAllFolds">
            <summary>
            Collapses all folds
            </summary>
        </member>
        <member name="T:ScintillaNet.Scintilla">
            <summary>
            Represents a Scintilla text editor control.
            </summary>
        </member>
        <member name="T:ScintillaNet.INativeScintilla">
            <summary>
            Interface representing the native Scintilla Message Based API. In addition
            to wrappers around each of the messages I have included an additional Method
            named SendMessageDirect with 9 overloads. This allows you to send messages
            to the Scintilla DefWndProc bypassing Windows' SendMessage. Each of the other
            methods wrap calls to SendMessageDirect.
            
            Scintilla explicetly implements this interface. To use these methods on 
            a Scintilla control Cast it as INativeScintilla or use NativeScintilla
            property.
            
            The reason for this interface is to keep the "regular" interface surface
            area of the Scintilla control as clean and .NETish as possible. Also
            this means when you want a direct native interface there's no other 
            absracted members (Aside from SendMessageDirect ;) cluttering the native
            interface.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.Dispose(System.Boolean)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnLostFocus(System.EventArgs)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnGotFocus(System.EventArgs)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnDoubleClick(System.EventArgs)">
            <summary>
            Provides the support for code block selection
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnCreateControl">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnCreateControl"/>.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="F:ScintillaNet.Scintilla._isBraceMatching">
            <summary>
            Enables the brace matching from current position.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.SafeBraceMatch(System.Int32)">
            <summary>
            Custom way to find the matching brace when BraceMatch() does not work
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnTextChanged">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.TextChanged"/> event.
            </summary>
            <param name="e">Empty</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnDocumentChange(ScintillaNet.NativeScintillaEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.DocumentChange"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.NativeScintillaEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnCallTipClick(ScintillaNet.CallTipClickEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.CallTipClick"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.CallTipClickEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnAutoCompleteAccepted(ScintillaNet.AutoCompleteAcceptedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.AutoCompleteAccepted"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.AutoCompleteAcceptedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnTextInserted(ScintillaNet.TextModifiedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.TextInserted"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.TextModifiedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnTextDeleted(ScintillaNet.TextModifiedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.TextDeleted"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.TextModifiedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnBeforeTextInsert(ScintillaNet.TextModifiedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.BeforeTextInsert"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.TextModifiedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnBeforeTextDelete(ScintillaNet.TextModifiedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.BeforeTextDelete"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.TextModifiedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnFoldChanged(ScintillaNet.FoldChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.FoldChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.FoldChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnMarkerChanged(ScintillaNet.MarkerChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.MarkerChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.MarkerChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnIndicatorClick(ScintillaNet.ScintillaMouseEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.IndicatorClick"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.ScintillaMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnMarginClick(ScintillaNet.MarginClickEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.MarginClick"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.MarginClickEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnStyleNeeded(ScintillaNet.StyleNeededEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.StyleNeeded"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.StyleNeededEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnCharAdded(ScintillaNet.CharAddedEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.CharAdded"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.CharAddedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnModifiedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.ModifiedChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnReadOnlyModifyAttempt(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.ReadOnlyModifyAttempt"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.SelectionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnLinesNeedShown(ScintillaNet.LinesNeedShownEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.LinesNeedShown"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.LinesNeedShownEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnDwellStart(ScintillaNet.ScintillaMouseEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.DwellStart"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.ScintillaMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnDwellEnd(ScintillaNet.ScintillaMouseEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.DwellEnd"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.ScintillaMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnZoomChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.ZoomChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnHotspotClick(ScintillaNet.ScintillaMouseEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.HotspotClick"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.ScintillaMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnHotspotDoubleClick(ScintillaNet.ScintillaMouseEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.HotspotDoubleClick"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.ScintillaMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnDropMarkerCollect(ScintillaNet.DropMarkerCollectEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.DropMarkerCollect"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.DropMarkerCollectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.Scroll"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnMacroRecord(ScintillaNet.MacroRecordEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.MacroRecord"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.MacroRecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.OnFileDrop(ScintillaNet.FileDropEventArgs)">
            <summary>
            Raises the <see cref="E:ScintillaNet.Scintilla.FileDrop"/> event.
            </summary>
            <param name="e">An <see cref="T:ScintillaNet.FileDropEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ScintillaNet.Scintilla.AppendText(System.String)">
            <summary>
            Appends a copy of the specified string to the end of this instance.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to append.</param>
            <returns>A <see cref="T:ScintillaNet.Range"/> representing the appended text.</returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.InsertText(System.String)">
            <summary>
            Inserts text at the current cursor position
            </summary>
            <param name="text">Text to insert</param>
            <returns>The range inserted</returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.InsertText(System.Int32,System.String)">
            <summary>
            Inserts text at the given position
            </summary>
            <param name="position">The position to insert text in</param>
            <param name="text">Text to insert</param>
            <returns>The text range inserted</returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.PositionIsOnComment(System.Int32)">
            <summary>
            Checks that if the specified position is on comment.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.PositionIsOnComment(System.Int32,ScintillaNet.Lexer)">
            <summary>
            Checks that if the specified position is on comment.
            </summary>
            <param name="position"></param>
            <param name="lexer"></param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.AddLastLineEnd">
            <summary>
            Adds a line end marker to the end of the document
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.GetWordFromPosition(System.Int32)">
            <summary>
            Gets a word from the specified position
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            This is the primary Native communication method with Scintilla
            used by this control. All the other overloads call into this one.
            </summary>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32)">
            <summary>
            Handles Scintilla Call Style:
               (,)
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (int,int)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Handles Scintilla Call Style:
               (int,uint)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (int,)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">wParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,ScintillaNet.VOID,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (,int)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="NULL">always pass null--Unused parameter</param>
            <param name="lParam">lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (bool,int)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">boolean wParam</param>
            <param name="lParam">int lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Boolean)">
            <summary>
            Handles Scintilla Call Style:
               (bool,)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">boolean wParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Handles Scintilla Call Style:
               (int,bool)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">int wParam</param>
            <param name="lParam">boolean lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.String@)">
            <summary>
            Handles Scintilla Call Style:
               (,stringresult)    
            Notes:
             Helper method to wrap all calls to messages that take a char*
             in the lParam and returns a regular .NET String. This overload
             assumes there will be no wParam and obtains the string length
             by calling the message with a 0 lParam. 
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="text">String output</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32,System.String@)">
            <summary>
            Handles Scintilla Call Style:
               (int,stringresult)    
            Notes:
             Helper method to wrap all calls to messages that take a char*
             in the lParam and returns a regular .NET String. This overload
             assumes there will be no wParam and obtains the string length
             by calling the message with a 0 lParam. 
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="text">String output</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.IntPtr,System.String@,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (?)    
            Notes:
             Helper method to wrap all calls to messages that take a char*
             in the wParam and set a regular .NET String in the lParam. 
             Both the length of the string and an additional wParam are used 
             so that various string Message styles can be acommodated.
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">int wParam</param>
            <param name="text">String output</param>
            <param name="length">length of the input buffer</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.Int32,System.String)">
            <summary>
            Handles Scintilla Call Style:
               (int,string)    
            Notes:
             This helper method handles all messages that take
             const char* as an input string in the lParam. In
             some messages Scintilla expects a NULL terminated string
             and in others it depends on the string length passed in
             as wParam. This method handles both situations and will
             NULL terminate the string either way. 
            
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">int wParam</param>
            <param name="lParam">string lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,ScintillaNet.VOID,System.String)">
            <summary>
            Handles Scintilla Call Style:
               (,string)    
            
            Notes:
             This helper method handles all messages that take
             const char* as an input string in the lParam. In
             some messages Scintilla expects a NULL terminated string
             and in others it depends on the string length passed in
             as wParam. This method handles both situations and will
             NULL terminate the string either way. 
            
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="NULL">always pass null--Unused parameter</param>
            <param name="lParam">string lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.String,System.String)">
            <summary>
            Handles Scintilla Call Style:
               (string,string)    
            
            Notes:
               Used by SCI_SETPROPERTY
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">string wParam</param>
            <param name="lParam">string lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.String,System.String@)">
            <summary>
            Handles Scintilla Call Style:
               (string,stringresult)    
            
            Notes:
             This one is used specifically by SCI_GETPROPERTY and SCI_GETPROPERTYEXPANDED
             so it assumes it's usage
            
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">string wParam</param>
            <param name="stringResult">Stringresult output</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.String,System.Int32)">
            <summary>
            Handles Scintilla Call Style:
               (string,int)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">string wParam</param>
            <param name="lParam">int lParam</param>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.Scintilla.ScintillaNet#INativeScintilla#SendMessageDirect(System.UInt32,System.String)">
            <summary>
            Handles Scintilla Call Style:
               (string,)    
            </summary>
            <param name="msg">Scintilla Message Number</param>
            <param name="wParam">string wParam</param>
            <returns></returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.CreateParams">
            <summary>
            Overriden. See <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.DefaultSize">
            <summary>
            Overriden. See <see cref="P:System.Windows.Forms.Control.DefaultSize"/>.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.DefaultCursor">
            <summary>Gets or sets the default cursor for the control.</summary>
            <returns>An object of type <see cref="T:System.Windows.Forms.Cursor"></see> representing the current default cursor.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER creates a new line of text in the
            control or activates the default button for the form.
            </summary>
            <returns><c>true</c> if the ENTER key creates a new line of text; <c>false</c> if the ENTER key activates
            the default button for the form. The default is <c>false</c>.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.AcceptsTab">
            <summary>
            Gets or sets a value indicating whether pressing the TAB key types a TAB character in the control
            instead of moving the focus to the next control in the tab order.
            </summary>
            <returns><c>true</c> if users can enter tabs using the TAB key; <c>false</c> if pressing the TAB key
            moves the focus. The default is <c>false</c>.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.AllowDrop">
            <summary>
            Gets or sets if .NET Drag and Drop operations are supported.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.AutoComplete">
            <summary>
            Controls autocompletion behavior.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.BackColor">
            <summary>
            Overriden. See <see cref="P:System.Windows.Forms.Control.BackColor"/>.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.BackgroundImage">
            <summary>
            This property is not relevant for this class.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.BackgroundImageLayout">
            <summary>
            This property is not relevant for this class.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.CallTip">
            <summary>
            Manages CallTip (Visual Studio-like code Tooltip) behaviors
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.Caption">
            <summary>
            Gets/Sets the Win32 Window Caption. Defaults to Type's FullName
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.Caret">
            <summary>
            Controls Caret Behavior
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.Clipboard">
            <summary>
            Controls Clipboard behavior.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.CurrentPos">
            <summary>
            Gets or sets the character index of the current caret position.
            </summary>
            <returns>The character index of the current caret position.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.Commands">
            <summary>
            Controls behavior of keyboard bound commands.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.ConfigurationManager">
            <summary>
            Controls behavior of loading/managing ScintillaNET configurations.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.DocumentHandler">
            <summary>
            Controls behavior of Documents
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.DocumentNavigation">
            <summary>
            Controls behavior of automatic document navigation
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.DropMarkers">
            <summary>
            Controls behavior of Drop Markers
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.EndOfLine">
            <summary>
            Controls End Of Line Behavior
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.Encoding">
            <summary>
            Controls Encoding behavior
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.ForeColor">
            <summary>
            Overriden. See <see cref="P:System.Windows.Forms.Control.ForeColor"/>.
            </summary>
        </member>
        <member name="P:ScintillaNet.Scintilla.Modified">
            <summary>
            Gets or sets a value that indicates that the control has been modified by the user since
            the control was created or its contents were last set.
            </summary>
            <returns><c>true</c> if the control's contents have been modified; otherwise, <c>false</c>.
            The default is <c>false</c>.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.SupressControlCharacters">
            <summary>
            Gets or sets a value indicating whether characters not considered alphanumeric (ASCII values 0 through 31)
            are prevented as text input.
            </summary>
            <returns><c>true</c> to prevent control characters as input; otherwise, <c>false</c>.
            The default is <c>true</c>.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.Text">
            <summary>
            Gets or sets the current text in the <see cref="T:ScintillaNet.Scintilla"/> control.
            </summary>
            <returns>The text displayed in the control.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.TextLength">
            <summary>
            Gets the length of text in the control.
            </summary>
            <returns>The number of characters contained in the text of the control.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.Whitespace">
            <summary>
            Gets the <see cref="P:ScintillaNet.Scintilla.Whitespace"/> display mode and style behavior associated with the <see cref="T:ScintillaNet.Scintilla"/> control.
            </summary>
            <returns>A <see cref="P:ScintillaNet.Scintilla.Whitespace"/> object that represents whitespace display mode and style behavior in a <see cref="T:ScintillaNet.Scintilla"/> control.</returns>
        </member>
        <member name="P:ScintillaNet.Scintilla.Zoom">
            <summary>
            Gets or sets the current zoom level of the <see cref="T:ScintillaNet.Scintilla"/> control.
            </summary>
            <returns>The factor by which the contents of the control is zoomed.</returns>
        </member>
        <member name="E:ScintillaNet.Scintilla.Load">
            <summary>
            Occurs when the control is first loaded.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.TextChanged">
            <summary>
            Occurs when the text or styling of the document changes or is about to change.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.DocumentChange">
            <summary>
            Occurs when the text or styling of the document changes or is about to change.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.CallTipClick">
            <summary>
            Occurs when a user clicks on a call tip.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.AutoCompleteAccepted">
            <summary>
            Occurs when the user makes a selection from the auto-complete list.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.TextInserted">
            <summary>
            Occurs when text has been inserted into the document.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.TextDeleted">
            <summary>
            Occurs when text has been removed from the document.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.BeforeTextInsert">
            <summary>
            Occurs when text is about to be inserted into the document.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.BeforeTextDelete">
            <summary>
            Occurs when text is about to be removed from the document.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.FoldChanged">
            <summary>
            Occurs when a folding change has occurred.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.MarkerChanged">
            <summary>
            Occurs when one or more markers has changed in a line of text.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.IndicatorClick">
            <summary>
            Occurs when the a clicks or releases the mouse on text that has an indicator.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.MarginClick">
            <summary>
            Occurs when the mouse was clicked inside a margin that was marked as sensitive.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.StyleNeeded">
            <summary>
            Occurs when the control is about to display or print text that requires styling.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.CharAdded">
            <summary>
            Occurs when the user types an ordinary text character (as opposed to a command character) into the text.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:ScintillaNet.Scintilla.ModifiedChanged" -->
        <member name="E:ScintillaNet.Scintilla.ReadOnlyModifyAttempt">
            <summary>
            Occurs when a user tries to modify text when in read-only mode.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.SelectionChanged">
            <summary>
            Occurs when the selection has changed.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.LinesNeedShown">
            <summary>
            Occurs when a range of lines that is currently invisible should be made visible.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.DwellStart">
            <summary>
            Occurs when the user hovers the mouse (dwells) in one position for the dwell period.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.DwellEnd">
            <summary>
            Occurs when a user actions such as a mouse move or key press ends a dwell (hover) activity.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.ZoomChanged">
            <summary>
            Occurs when the user zooms the display using the keyboard or the <see cref="P:ScintillaNet.Scintilla.Zoom"/> property is set.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.HotspotClick">
            <summary>
            Occurs when a user clicks on text that is in a style with the hotspot attribute set.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.HotspotDoubleClick">
            <summary>
            Occurs when a user double-clicks on text that is in a style with the hotspot attribute set.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.DropMarkerCollect">
            <summary>
            Occurs when a <see cref="T:ScintillaNet.DropMarker"/> is about to be collected.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.Scroll">
            <summary>
            Occurs when the control is scrolled.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.MacroRecord">
            <summary>
            Occurs each time a recordable change occurs.
            </summary>
        </member>
        <member name="E:ScintillaNet.Scintilla.FileDrop">
            <summary>
            Occurs when a user drops a file on the <see cref="T:ScintillaNet.Scintilla"/> control.
            </summary>
        </member>
        <member name="T:ScintillaNet.Scintilla.LastSelection">
            <summary>
            Holds the last previous selection's properties, to let us know when we should fire SelectionChanged
            </summary>
        </member>
        <member name="T:ScintillaNet.PageSettings">
            <summary>
            ScintillaNET derived class for handling printed page settings.  It holds information 
            on how and what to print in the header and footer of pages.
            </summary>
        </member>
        <member name="F:ScintillaNet.PageSettings.DefaultHeader">
            <summary>
            Default header style used when no header is provided.
            </summary>
        </member>
        <member name="F:ScintillaNet.PageSettings.DefaultFooter">
            <summary>
            Default footer style used when no footer is provided.
            </summary>
        </member>
        <member name="M:ScintillaNet.PageSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:ScintillaNet.PageSettings.Header">
            <summary>
            Page Information printed in header of the page
            </summary>
        </member>
        <member name="P:ScintillaNet.PageSettings.Footer">
            <summary>
            Page Information printed in the footer of the page
            </summary>
        </member>
        <member name="P:ScintillaNet.PageSettings.FontMagnification">
            <summary>
            Number of points to add or subtract to the size of each screen font during printing
            </summary>
        </member>
        <member name="P:ScintillaNet.PageSettings.ColorMode">
            <summary>
            Method used to render colored text on a printer
            </summary>
        </member>
        <member name="T:ScintillaNet.CallTip">
            <summary>
            Used to display CallTips and Manages CallTip settings.
            </summary>
            <remarks>
            CallTips are a special form of ToolTip that can be displayed specifically for 
            a document position. It also display a list of method overloads and
            highlighight a portion of the message. This is useful in IDE scenarios.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="position">The document position where the calltip should be displayed</param>
            <param name="startIndex">The index of the initial overload to display</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="position">The document position where the calltip should be displayed</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The overload startIndex will be 0 with no Highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="position">The document position where the calltip should be displayed</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The overload startIndex will be 0
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.UInt32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="startIndex">The index of the initial overload to display</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The current document position will be used with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="startIndex">The index of the initial overload to display</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The current document position will be used
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The current document position will be used starting at position 0 with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(ScintillaNet.OverloadList,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="overloadList">List of overloads to be displayed see <see cref="!:OverLoadList"/></param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The current document position will be used starting at position 0
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.Int32,System.UInt32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="position">The document position where the calltip should be displayed</param>
            <param name="startIndex">The index of the initial overload to display</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. It will be displayed at the current document
            position with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="position">The document position where the calltip should be displayed</param>
            <param name="startIndex">The index of the initial overload to display</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="position">The document position where the calltip should be displayed</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. The overload at position 0 will be displayed
            with no highlight.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.Int32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="position">The document position where the calltip should be displayed</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. The overload at position 0 will be displayed.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.UInt32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="startIndex">The index of the initial overload to display</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. It will be displayed at the current document
            position with no highlight.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="startIndex">The index of the initial overload to display</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. It will be displayed at the current document
            position.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload(System.Int32,System.Int32)">
            <summary>
            Shows the calltip with overloads
            </summary>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. It will be displayed at the current document
            position starting at overload 0
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.ShowOverload">
            <summary>
            Shows the calltip with overloads
            </summary>
            <remarks>
            ShowOverload automatically handles displaying a calltip with a list of overloads. It automatically shows the
            up and down arrows and cycles through the list of overloads in response to mouse clicks.
            The <see cref="!:OverLoadList"/> must already be populated. It will be displayed at the current document
            position starting at overload 0 with no highlight.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="message">The calltip message to be displayed</param>
            <param name="position">The document position to show the calltip</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.String)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="message">The calltip message to be displayed</param>
            <remarks>
            The calltip will be displayed at the current document position with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.String,System.Int32,System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="message">The calltip message to be displayed</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            The calltip will be displayed at the current document position
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.String,System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="message">The calltip message to be displayed</param>
            <param name="position">The document position to show the calltip</param>
            <remarks>
            The calltip will be displayed with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="position">The document position to show the calltip</param>
            <remarks>
            The <see cref="P:ScintillaNet.CallTip.Message"/> must already be populated. The calltip with no highlight
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="position">The document position to show the calltip</param>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            The <see cref="P:ScintillaNet.CallTip.Message"/> must already be populated.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show(System.Int32,System.Int32)">
            <summary>
            Displays a calltip without overloads
            </summary>
            <param name="highlightStart">Start posision of the part of the message that should be selected</param>
            <param name="highlightEnd">End posision of the part of the message that should be selected</param>
            <remarks>
            The <see cref="P:ScintillaNet.CallTip.Message"/> must already be populated. The calltip will be displayed at the current document position
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Show">
            <summary>
            Displays a calltip without overloads
            </summary>
            <remarks>
            The <see cref="P:ScintillaNet.CallTip.Message"/> must already be populated. The calltip will be displayed at the current document position
            with no highlight.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Cancel">
            <summary>
            Hides the calltip
            </summary>
            <remarks>
            <see cref="M:ScintillaNet.CallTip.Hide"/> and <see cref="M:ScintillaNet.CallTip.Cancel"/> do the same thing
            </remarks>
        </member>
        <member name="M:ScintillaNet.CallTip.Hide">
            <summary>
            Hides the calltip
            </summary>
            <remarks>
            <see cref="M:ScintillaNet.CallTip.Hide"/> and <see cref="M:ScintillaNet.CallTip.Cancel"/> do the same thing
            </remarks>
        </member>
        <member name="P:ScintillaNet.CallTip.OverloadList">
            <summary>
            List of method overloads to display in the calltip
            </summary>
            <remarks>
            This is used to display IDE type toolips that include Up/Down arrows that cycle
            through the list of overloads when clicked
            </remarks>
        </member>
        <member name="P:ScintillaNet.CallTip.Message">
            <summary>
            The message displayed in the calltip
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTip.ForeColor">
            <summary>
            Gets/Sets Text color of all CallTips
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ScintillaNet.CallTip.BackColor">
            <summary>
            Gets/Sets the background color of all CallTips
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTip.HighlightTextColor">
            <summary>
            Gets/Sets the Text Color of the portion of the CallTip that is highlighted
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTip.HighlightStart">
            <summary>
            Start position of the text to be highlighted in the CalTip
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTip.HighlightEnd">
            <summary>
            End position of the text to be highlighted in the CalTip
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTip.IsActive">
            <summary>
            Returns true if a CallTip is currently displayed
            </summary>
        </member>
        <member name="T:ScintillaNet.OverloadList">
            <summary>
            List of strings to be used with <see cref="T:ScintillaNet.CallTip"/>. 
            </summary>
        </member>
        <member name="M:ScintillaNet.OverloadList.#ctor">
            <summary>
            Creates a new instance of an OverLoadList
            </summary>
        </member>
        <member name="M:ScintillaNet.OverloadList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of an OverLoadList. The list of overloads is supplied by collection
            </summary>
        </member>
        <member name="M:ScintillaNet.OverloadList.#ctor(System.Int32)">
            <summary>
            Creates a new instance of an OverLoadList. The 
            </summary>
        </member>
        <member name="P:ScintillaNet.OverloadList.CurrentIndex">
            <summary>
            Index of the overload to be displayed in the CallTip
            </summary>
        </member>
        <member name="P:ScintillaNet.OverloadList.Current">
            <summary>
            Text of the overload to be displayed in the CallTip
            </summary>
        </member>
        <member name="T:ScintillaNet.DocumentHandler">
            <summary>
            Manages the Native Scintilla's Document features.
            </summary>
            <remarks>
            See Scintilla's documentation on multiple views for an understanding of Documents.
            Note that all ScintillaNET specific features are considered to be part of the View, not document.
            </remarks>
        </member>
        <member name="M:ScintillaNet.DocumentHandler.Create">
            <summary>
            Creates a new Document
            </summary>
            <returns></returns>
        </member>
        <member name="P:ScintillaNet.DocumentHandler.Current">
            <summary>
            Gets/Sets the currently loaded Document
            </summary>
        </member>
        <member name="T:ScintillaNet.Document">
            <summary>
            Provides an abstraction over Scintilla's Document Pointer
            </summary>
        </member>
        <member name="M:ScintillaNet.Document.AddRef">
            <summary>
            Increases the document's reference count
            </summary>
            <remarks>No, you aren't looking at COM, move along.</remarks>
        </member>
        <member name="M:ScintillaNet.Document.Release">
            <summary>
            Decreases the document's reference count
            </summary>
            <remarks>
            When the document's reference count reaches 0 Scintilla will destroy the document
            </remarks>
        </member>
        <member name="M:ScintillaNet.Document.Equals(System.Object)">
            <summary>
            Overriden. 
            </summary>
            <param name="obj">Another Document Object</param>
            <returns>True if both Documents have the same Handle</returns>
        </member>
        <member name="M:ScintillaNet.Document.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns>Document Pointer's hashcode</returns>
        </member>
        <member name="P:ScintillaNet.Document.Handle">
            <summary>
            Scintilla's internal document pointer.
            </summary>
        </member>
        <member name="F:ScintillaNet.Indentation._smartIndentType">
            <summary>
            Enables the Smart Indenter so that On enter, it indents the next line.
            </summary>
        </member>
        <member name="M:ScintillaNet.Indentation.CheckSmartIndent(System.Char)">
            <summary>
            If Smart Indenting is enabled, this delegate will be added to the CharAdded multicast event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ScintillaNet.Indentation.SmartIndentCustomAction">
            <summary>
            For Custom Smart Indenting, assign a handler to this delegate property.
            </summary>
        </member>
        <member name="M:ScintillaNet.Indentation.IndentLine(System.Int32,System.Int32)">
            <summary>
            Smart Indenting helper method
            </summary>
            <param name="line"></param>
            <param name="indent"></param>
        </member>
        <member name="F:ScintillaNet.GoToDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ScintillaNet.GoToDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ScintillaNet.GoToDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ScintillaNet.Whitespace">
            <summary>
            Determines how whitespace should be displayed in a <see cref="T:ScintillaNet.Scintilla"/> control.
            </summary>
            <remarks>
            By default, whitespace is determined by the lexer in use. Setting the <see cref="P:ScintillaNet.Whitespace.ForeColor"/>
            or <see cref="P:ScintillaNet.Whitespace.BackColor"/> properties overrides the lexer behavior.</remarks>
        </member>
        <member name="P:ScintillaNet.Whitespace.BackColor">
            <summary>
            Gets or sets the whitespace background color.
            </summary>
            <remarks>
            By default, the whitespace background color is determined by the lexer in use.
            Setting the <c>BackColor</c> to anything other than <see cref="F:System.Drawing.Color.Empty"/> overrides the lexer behavior.
            Transparent colors are not supported.
            </remarks>
            <returns>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of whitespace characters.
            The default is <see cref="F:System.Drawing.Color.Empty"/>.
            </returns>
            <exception cref="!:ArgumentOutOfRange">
            The specified <paramref name="value"/> has an alpha value that is less that <see cref="F:System.Byte.MaxValue"/>.
            </exception>
        </member>
        <member name="P:ScintillaNet.Whitespace.ForeColor">
            <summary>
            Gets or sets the whitespace foreground color.
            </summary>
            <remarks>
            By default, the whitespace foreground color is determined by the lexer in use.
            Setting the <c>ForeColor</c> to anything other than <see cref="F:System.Drawing.Color.Empty"/> overrides the lexer behavior.
            Transparent colors are not supported.
            </remarks>
            <returns>
            A <see cref="T:System.Drawing.Color"/> that represents the foreground color of whitespace characters.
            The default is <see cref="F:System.Drawing.Color.Empty"/>.
            </returns>
            <exception cref="!:ArgumentOutOfRange">
            The specified <paramref name="value"/> has an alpha value that is less that <see cref="F:System.Byte.MaxValue"/>.
            </exception>
        </member>
        <member name="P:ScintillaNet.Whitespace.Mode">
            <summary>
            Gets or sets the whitespace display mode.
            </summary>
            <returns>One of the <see cref="T:ScintillaNet.WhitespaceMode"/> values. The default is <see cref="F:ScintillaNet.WhitespaceMode.Invisible"/></returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a valid <see cref="T:ScintillaNet.WhitespaceMode"/> value.
            </exception>
        </member>
        <member name="T:ScintillaNet.VOID">
            <summary>
            Used internally to signify an ignored parameter by overloads of SendMessageDirect
            that match the native Scintilla's Message signatures.
            </summary>
        </member>
        <member name="T:ScintillaNet.CaretStyle">
            <summary>
            The style of visual indicator that the caret displayes.
            </summary>
        </member>
        <member name="F:ScintillaNet.CaretStyle.Invisible">
            <summary>
            The caret is not displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.CaretStyle.Line">
            <summary>
            A vertical line is displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.CaretStyle.Block">
            <summary>
            A horizontal block is displayed that may cover the character.
            </summary>
        </member>
        <member name="T:ScintillaNet.Lexer">
            <summary>
            Built in lexers supported by Scintilla
            </summary>
        </member>
        <member name="F:ScintillaNet.Lexer.Container">
            <summary>
            No lexing is performed, the Containing application must respond to StyleNeeded events
            </summary>
        </member>
        <member name="F:ScintillaNet.Lexer.Null">
            <summary>
            No lexing is performed
            </summary>
        </member>
        <member name="T:ScintillaNet.WhitespaceMode">
            <summary>
            Specifies the display mode of whitespace characters.
            </summary>
        </member>
        <member name="F:ScintillaNet.WhitespaceMode.Invisible">
            <summary>
            The normal display mode with whitespace displayed as an empty background color.
            </summary>
        </member>
        <member name="F:ScintillaNet.WhitespaceMode.VisibleAlways">
            <summary>
            Whitespace characters are drawn as dots and arrows.
            </summary>
        </member>
        <member name="F:ScintillaNet.WhitespaceMode.VisibleAfterIndent">
            <summary>
            Whitespace used for indentation is displayed normally but after the first visible character, it is shown as dots and arrows.
            </summary>
        </member>
        <member name="T:ScintillaNet.EndOfLineMode">
            <summary>
            Document's EndOfLine Mode
            </summary>
        </member>
        <member name="F:ScintillaNet.EndOfLineMode.Crlf">
            <summary>
            Carriage Return + Line Feed (Windows Style)
            </summary>
        </member>
        <member name="F:ScintillaNet.EndOfLineMode.CR">
            <summary>
            Carriage Return Only (Mac Style)
            </summary>
        </member>
        <member name="F:ScintillaNet.EndOfLineMode.LF">
            <summary>
            Line Feed Only (Unix Style)
            </summary>
        </member>
        <member name="T:ScintillaNet.MarkerSymbol">
            <summary>
            What graphic a margin marker is displayed.
            </summary>
        </member>
        <member name="T:ScintillaNet.StylesCommon">
            <summary>
            Common predefined styles that are always valid with any lexer.
            </summary>
        </member>
        <member name="T:ScintillaNet.CharacterSet">
            <summary>
            The CharacterSet used by the document
            </summary>
        </member>
        <member name="T:ScintillaNet.StyleCase">
            <summary>
            Represents casing styles
            </summary>
        </member>
        <member name="F:ScintillaNet.StyleCase.Mixed">
            <summary>
            Both upper and lower case
            </summary>
        </member>
        <member name="F:ScintillaNet.StyleCase.Upper">
            <summary>
            Only upper case
            </summary>
        </member>
        <member name="F:ScintillaNet.StyleCase.Lower">
            <summary>
            Only lower case
            </summary>
        </member>
        <member name="T:ScintillaNet.IndicatorStyle">
            <summary>
            Style of Indicator to be displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Plain">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Squiggle">
            <summary>
            Squigly lines (commonly used for spellcheck)
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.TT">
            <summary>
            Small t's are displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Diagonal">
            <summary>
            Small diagnol lines
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Strike">
            <summary>
            Strikethrough line
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.Box">
            <summary>
            Displayes a bounding box around the indicated text
            </summary>
        </member>
        <member name="F:ScintillaNet.IndicatorStyle.RoundBox">
            <summary>
            Displayes a bounding box around the indicated text with rounded corners
            and an translucent background color
            </summary>
        </member>
        <member name="T:ScintillaNet.PrintColorMode">
            <summary>
            Controls color mode fore printing
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintColorMode.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintColorMode.InvertLight">
            <summary>
            Inverts the colors
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintColorMode.BlackOnWhite">
            <summary>
            Black Text on white background
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintColorMode.ColorOnWhite">
            <summary>
            Styled color text on white background
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintColorMode.ColorOnWhiteDefaultBackground">
            <summary>
            Styled color text on white background for unstyled background colors
            </summary>
        </member>
        <member name="T:ScintillaNet.FindOption">
            <summary>
            Controls find behavior for non-regular expression searches
            </summary>
        </member>
        <member name="F:ScintillaNet.FindOption.WholeWord">
            <summary>
            Find must match the whole word
            </summary>
        </member>
        <member name="F:ScintillaNet.FindOption.MatchCase">
            <summary>
            Find must match the case of the expression
            </summary>
        </member>
        <member name="F:ScintillaNet.FindOption.WordStart">
            <summary>
            Only match the start of a word
            </summary>
        </member>
        <member name="F:ScintillaNet.FindOption.RegularExpression">
            <summary>
            Not used in ScintillaNet
            </summary>
        </member>
        <member name="F:ScintillaNet.FindOption.Posix">
            <summary>
            Not used in ScintillaNet
            </summary>
        </member>
        <member name="T:ScintillaNet.WrapMode">
            <summary>
            Controls how line wrapping occurs
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapMode.None">
            <summary>
            No Wrapping
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapMode.Word">
            <summary>
            Wraps at the nearest word
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapMode.Char">
            <summary>
            Wraps at the last character
            </summary>
        </member>
        <member name="T:ScintillaNet.WrapVisualFlag">
            <summary>
            How wrap visual indicators are displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapVisualFlag.None">
            <summary>
            No wrap indicators are displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapVisualFlag.End">
            <summary>
            Wrap indicators are displayed at the end of the line
            </summary>
        </member>
        <member name="F:ScintillaNet.WrapVisualFlag.Start">
            <summary>
            Wrap indicators are displayed at the start of the line
            </summary>
        </member>
        <member name="T:ScintillaNet.EdgeMode">
            <summary>
            How long lines are visually indicated
            </summary>
        </member>
        <member name="F:ScintillaNet.EdgeMode.None">
            <summary>
            No indication
            </summary>
        </member>
        <member name="F:ScintillaNet.EdgeMode.Line">
            <summary>
            A vertical line is displayed
            </summary>
        </member>
        <member name="F:ScintillaNet.EdgeMode.Background">
            <summary>
            The background color changes
            </summary>
        </member>
        <member name="T:ScintillaNet.CallTipArrow">
            <summary>
            Represents an arrow in the CallTip
            </summary>
        </member>
        <member name="F:ScintillaNet.CallTipArrow.None">
            <summary>
            No arrow
            </summary>
        </member>
        <member name="F:ScintillaNet.CallTipArrow.Up">
            <summary>
            The Up arrow
            </summary>
        </member>
        <member name="F:ScintillaNet.CallTipArrow.Down">
            <summary>
            The Down Arrow
            </summary>
        </member>
        <member name="T:ScintillaNet.BindableCommand">
            <summary>
            List of commands that ScintillaNet can execute. These can be
            bound to keyboard shortcuts
            </summary>
        </member>
        <member name="T:ScintillaNet.SmartIndent">
            <summary>
            Style of smart indent
            </summary>
        </member>
        <member name="F:ScintillaNet.SmartIndent.None">
            <summary>
            No smart indent
            </summary>
        </member>
        <member name="F:ScintillaNet.SmartIndent.CPP">
            <summary>
            c++ style indenting
            </summary>
        </member>
        <member name="F:ScintillaNet.SmartIndent.CPP2">
            <summary>
            Alternate c++ style indenting
            </summary>
        </member>
        <member name="F:ScintillaNet.SmartIndent.Simple">
            <summary>
            Block indenting, the last indentation is retained in new lines
            </summary>
        </member>
        <member name="T:ScintillaNet.DropMarkers">
            <summary>
            Manages DropMarkers, a Stack Based document bookmarking system.
            </summary>
        </member>
        <member name="M:ScintillaNet.DropMarkers.Drop">
            <summary>
            Drops a DropMarker at the current document position
            </summary>
            <remarks>
            Dropping a DropMarker creates a visual marker (red triangle)
            indicating the DropMarker point.
            </remarks>
            <returns>The newly created DropMarker</returns>
        </member>
        <member name="M:ScintillaNet.DropMarkers.Drop(System.Int32)">
            <summary>
            Drops a DropMarker at the specified document position
            </summary>
            <param name="position"></param>
            <returns>The newly created DropMarker</returns>
            <remarks>
            Dropping a DropMarker creates a visual marker (red triangle)
            indicating the DropMarker point.
            </remarks>
        </member>
        <member name="M:ScintillaNet.DropMarkers.Collect">
            <summary>
            Collects the last dropped DropMarker
            </summary>
            <remarks>
            When a DropMarker is collected the current document posision is moved
            to the DropMarker posision, the DropMarker is removed from the stack
            and the visual indicator is removed.
            </remarks>
        </member>
        <member name="P:ScintillaNet.DropMarkers.SharedStackName">
            <summary>
            Gets/Sets a shared name associated with other Scintilla controls. 
            </summary>
            <remarks>
            All Scintilla controls with the same SharedStackName share a common
            DropMarker stack. This is useful in MDI applications where you want
            the DropMarker stack not to be specific to one document.
            </remarks>
        </member>
        <member name="P:ScintillaNet.DropMarkers.MarkerStack">
            <summary>
            Gets/Sets the Stack of DropMarkers 
            </summary>
            <remarks>
            You can manually set this to implement your own shared DropMarker stack
            between Scintilla Controls. 
            </remarks>
            <seealso cref="P:ScintillaNet.DropMarkers.SharedStackName"/>
        </member>
        <member name="P:ScintillaNet.DropMarkers.AllDocumentDropMarkers">
            <summary>
            Gets/Sets a list of All DropMarkers specific to this Scintilla control
            </summary>
        </member>
        <member name="T:ScintillaNet.DropMarkerList">
            <summary>
            Data structure used to store DropMarkers in the AllDocumentDropMarkers property.
            </summary>
        </member>
        <member name="T:ScintillaNet.DropMarker">
            <summary>
            Represents a DropMarker, currently a single document point.
            </summary>
        </member>
        <member name="M:ScintillaNet.DropMarker.Change(System.Int32,System.Int32)">
            <summary>
            Overriden, changes the document position. Start and End should
            match.
            </summary>
            <param name="newStart">Document start position</param>
            <param name="newEnd">Document end position</param>
        </member>
        <member name="M:ScintillaNet.DropMarker.Invalidate">
            <summary>
            Forces a repaint of the DropMarker
            </summary>
        </member>
        <member name="M:ScintillaNet.DropMarker.Collect">
            <summary>
            Collects the DropMarker and causes it to be removed from all
            lists it belongs ti.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.DropMarker.Dispose">
            <summary>
            Overriden.
            </summary>
        </member>
        <member name="M:ScintillaNet.DropMarker.GetClientRectangle">
            <summary>
            Gets the Client Rectangle in pixels of the DropMarker's visual indicator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ScintillaNet.DropMarker.TopOffset">
            <summary>
            Not currently used, the offset in pixels from the document view's
            top.
            </summary>
        </member>
        <member name="P:ScintillaNet.DropMarker.Key">
            <summary>
            Uniquely identifies the DropMarker
            </summary>
        </member>
        <member name="P:ScintillaNet.DropMarker.IsPoint">
            <summary>
            Overriden. Drop Markers are points, not a spanned range. Though this could change in the future.
            </summary>
        </member>
        <member name="T:ScintillaNet.PageInformationBorder">
            <summary>
            Type of border to print for a Page Information section
            </summary>
        </member>
        <member name="F:ScintillaNet.PageInformationBorder.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:ScintillaNet.PageInformationBorder.Top">
            <summary>
            Border along the top
            </summary>
        </member>
        <member name="F:ScintillaNet.PageInformationBorder.Bottom">
            <summary>
            Border along the bottom
            </summary>
        </member>
        <member name="F:ScintillaNet.PageInformationBorder.Box">
            <summary>
            A full border around the page information section
            </summary>
        </member>
        <member name="T:ScintillaNet.InformationType">
            <summary>
            Type of data to display at one of the positions in a Page Information section
            </summary>
        </member>
        <member name="F:ScintillaNet.InformationType.Nothing">
            <summary>
            Nothing is displayed at the position
            </summary>
        </member>
        <member name="F:ScintillaNet.InformationType.PageNumber">
            <summary>
            The page number is displayed in the format "Page #"
            </summary>
        </member>
        <member name="F:ScintillaNet.InformationType.DocumentName">
            <summary>
            The document name is displayed
            </summary>
        </member>
        <member name="T:ScintillaNet.PageInformation">
            <summary>
            Class for determining how and what to print for a header or footer.
            </summary>
        </member>
        <member name="F:ScintillaNet.PageInformation.DefaultFont">
            <summary>
            Default font used for Page Information sections
            </summary>
        </member>
        <member name="M:ScintillaNet.PageInformation.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ScintillaNet.PageInformation.#ctor(ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Normal Use Constructor
            </summary>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="M:ScintillaNet.PageInformation.#ctor(System.Int32,System.Drawing.Font,ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Full Constructor
            </summary>
            <param name="iMargin">Margin to use</param>
            <param name="oFont">Font to use </param>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="M:ScintillaNet.PageInformation.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Int32)">
            <summary>
            Draws the page information section in the specified rectangle
            </summary>
            <param name="oGraphics"></param>
            <param name="oBounds"></param>
            <param name="strDocumentName"></param>
            <param name="iPageNumber"></param>
        </member>
        <member name="P:ScintillaNet.PageInformation.Margin">
            <summary>
            Space between the Page Information section and the rest of the page
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Font">
            <summary>
            Font used in printing the Page Information section
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Border">
            <summary>
            Border style used for the Page Information section
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Left">
            <summary>
            Information printed on the left side of the Page Information section
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Center">
            <summary>
            Information printed in the center of the Page Information section
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Right">
            <summary>
            Information printed on the right side of the Page Information section
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Display">
            <summary>
            Whether there is a need to display this item, true if left, center, or right are not nothing.
            </summary>
        </member>
        <member name="P:ScintillaNet.PageInformation.Height">
            <summary>
            Height required to draw the Page Information section based on the options selected.
            </summary>
        </member>
        <member name="M:ScintillaNet.HeaderInformation.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ScintillaNet.HeaderInformation.#ctor(ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Normal Use Constructor
            </summary>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="M:ScintillaNet.HeaderInformation.#ctor(System.Int32,System.Drawing.Font,ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Full Constructor
            </summary>
            <param name="iMargin">Margin to use</param>
            <param name="oFont">Font to use </param>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="M:ScintillaNet.FooterInformation.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ScintillaNet.FooterInformation.#ctor(ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Normal Use Constructor
            </summary>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="M:ScintillaNet.FooterInformation.#ctor(System.Int32,System.Drawing.Font,ScintillaNet.PageInformationBorder,ScintillaNet.InformationType,ScintillaNet.InformationType,ScintillaNet.InformationType)">
            <summary>
            Full Constructor
            </summary>
            <param name="iMargin">Margin to use</param>
            <param name="oFont">Font to use </param>
            <param name="eBorder">Border style</param>
            <param name="eLeft">What to print on the left side of the page</param>
            <param name="eCenter">What to print in the center of the page</param>
            <param name="eRight">What to print on the right side of the page</param>
        </member>
        <member name="F:ScintillaNet.FindReplaceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ScintillaNet.FindReplaceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ScintillaNet.FindReplaceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ScintillaNet.PrintDocument">
            <summary>
            ScintillaNET derived class for handling printing of source code from a Scintilla control.
            </summary>
        </member>
        <member name="M:ScintillaNet.PrintDocument.#ctor(ScintillaNet.Scintilla)">
            <summary>
            Default Constructor
            </summary>
            <param name="oScintillaControl">Scintilla control being printed</param>
        </member>
        <member name="M:ScintillaNet.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Method called after the Print method is called and before the first page of the document prints
            </summary>
            <param name="e">A PrintPageEventArgs that contains the event data</param>
        </member>
        <member name="M:ScintillaNet.PrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Method called when the last page of the document has printed
            </summary>
            <param name="e">A PrintPageEventArgs that contains the event data</param>
        </member>
        <member name="M:ScintillaNet.PrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Method called when printing a page
            </summary>
            <param name="e">A PrintPageEventArgs that contains the event data</param>
        </member>
        <member name="T:ScintillaNet.RangeToFormat">
            <summary>
            Struct used for passing parameters to FormatRange()
            </summary>
        </member>
        <member name="F:ScintillaNet.RangeToFormat.hdc">
            <summary>
            The HDC (device context) we print to
            </summary>
        </member>
        <member name="F:ScintillaNet.RangeToFormat.hdcTarget">
            <summary>
            The HDC we use for measuring (may be same as hdc)
            </summary>
        </member>
        <member name="F:ScintillaNet.RangeToFormat.rc">
            <summary>
            Rectangle in which to print
            </summary>
        </member>
        <member name="F:ScintillaNet.RangeToFormat.rcPage">
            <summary>
            Physically printable page size
            </summary>
        </member>
        <member name="F:ScintillaNet.RangeToFormat.chrg">
            <summary>
            Range of characters to print
            </summary>
        </member>
        <member name="T:ScintillaNet.PrintRectangle">
            <summary>
            Struct used for specifying the printing bounds
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintRectangle.Left">
            <summary>
            Left X Bounds Coordinate
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintRectangle.Top">
            <summary>
            Top Y Bounds Coordinate
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintRectangle.Right">
            <summary>
            Right X Bounds Coordinate
            </summary>
        </member>
        <member name="F:ScintillaNet.PrintRectangle.Bottom">
            <summary>
            Bottom Y Bounds Coordinate
            </summary>
        </member>
        <member name="T:ScintillaNet.NotifyHeader">
            <summary>
            This matches the Win32 NMHDR structure
            </summary>
        </member>
        <member name="M:ScintillaNet.Configuration.CommandBindingConfig.#ctor(ScintillaNet.KeyBinding,System.Nullable{System.Boolean},ScintillaNet.BindableCommand)">
            <summary>
            Initializes a new instance of the CommandBindingConfig structure.
            </summary>
            <param name="keyBinding"></param>
            <param name="replaceCurrent"></param>
            <param name="bindableCommand"></param>
        </member>
        <member name="T:ScintillaNet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ScintillaNet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ScintillaNet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:ScintillaNet.IncrementalSearcher.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ScintillaNet.IncrementalSearcher.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ScintillaNet.IncrementalSearcher.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ScintillaNet.DocumentNavigation">
            <summary>
            Manages Document Navigation, which is a snapshot history of movements within
            a document.
            </summary>
        </member>
        <member name="M:ScintillaNet.DocumentNavigation.NavigateBackward">
            <summary>
            Causes the current position to navigate to the last snapshotted document position.
            </summary>
        </member>
        <member name="M:ScintillaNet.DocumentNavigation.NavigateForward">
            <summary>
            After 1 or more backwards navigations this command navigates to the previous
            backwards navigation point.
            </summary>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.IsEnabled">
            <summary>
            Gets/Sets whether Document Navigation is tracked. Defaults to true.
            </summary>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.MaxHistorySize">
            <summary>
            Maximum number of places the document navigation remembers. Defaults to 50.
            </summary>
            <remarks>
            When the max value is reached the oldest entries are removed.
            </remarks>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.BackwardStack">
            <summary>
            List of entries that allow you to navigate backwards.
            </summary>
            <remarks>
            The ForwardStack and BackwardStack can be shared between multiple
            ScintillaNET objects. This is useful in MDI applications when you wish
            to have a shared document navigation that remembers positions in each
            document.
            </remarks>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.ForewardStack">
            <summary>
            List of entries that allow you to navigate forwards.
            </summary>
            <remarks>
            The ForwardStack and BackwardStack can be shared between multiple
            ScintillaNET objects. This is useful in MDI applications when you wish
            to have a shared document navigation that remembers positions in each
            document.
            </remarks>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.NavigationPointTimeout">
            <summary>
            Time in milliseconds to wait before a Navigation Point is set. Default is 200
            </summary>
            <remarks>
            In text editing, the current caret position is constantly changing. Rather than capture every
            change in position, ScintillaNET captures the current position [NavigationPointTimeout]ms after a 
            position changes, only then is it eligable for another snapshot
            </remarks>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.CanNavigateBackward">
            <summary>
            Returns true if ScintillaNET can perform a successful backward navigation.
            </summary>
        </member>
        <member name="P:ScintillaNet.DocumentNavigation.CanNavigateForward">
            <summary>
            Returns true if ScintillaNET can perform a successful forward navigation.
            </summary>
        </member>
        <member name="T:ScintillaNet.DocumentNavigation.FakeStack">
            <summary>
            Mostly behaves like a stack but internally maintains a List for more flexability
            </summary>
            <remarks>
            FakeStack is not a general purpose datastructure and can only hold NavigationPoint objects
            </remarks>
        </member>
        <member name="T:ScintillaNet.DocumentNavigation.NavigationPont">
            <summary>
            Represents a point in the document used for navigation.
            </summary>
        </member>
        <member name="M:ScintillaNet.DocumentNavigation.NavigationPont.#ctor(System.Int32,ScintillaNet.Scintilla)">
            <summary>
            Initializes a new instance of the NavigationPont class.
            </summary>
        </member>
        <member name="M:ScintillaNet.DocumentNavigation.NavigationPont.Dispose">
            <summary>
            Overriden.
            </summary>
        </member>
        <member name="M:ScintillaNet.Configuration.KeyWordConfig.#ctor(System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the KeyWordConfig class.
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="inherit"></param>
        </member>
        <member name="T:ScintillaNet.DropMarkerCollectEventArgs">
            <summary>
            Provides data for a DropMarkerCollect event
            </summary>
        </member>
        <member name="M:ScintillaNet.DropMarkerCollectEventArgs.#ctor(ScintillaNet.DropMarker)">
            <summary>
            Initializes a new instance of the DropMarkerCollectEventArgs class.
            </summary>
            <param name="dropMarker"></param>
        </member>
        <member name="P:ScintillaNet.DropMarkerCollectEventArgs.DropMarker">
            <summary>
            Returns the DropMarker that was collected
            </summary>
        </member>
        <member name="T:ScintillaNet.CallTipClickEventArgs">
            <summary>
            Provides data for the CallTipClick event
            </summary>
        </member>
        <member name="M:ScintillaNet.CallTipClickEventArgs.#ctor(ScintillaNet.CallTipArrow,System.Int32,System.Int32,ScintillaNet.OverloadList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CallTipClickEventArgs class.
            </summary>
            <param name="callTipArrow">CallTipArrow clicked</param>
            <param name="currentIndex">Current posision of the overload list</param>
            <param name="newIndex">New position of the overload list</param>
            <param name="overloadList">List of overloads to be cycled in the calltip</param>
            <param name="highlightStart">Start position of the highlighted text</param>
            <param name="highlightEnd">End position of the highlighted text</param>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.CallTipArrow">
            <summary>
            Returns the CallTipArrow that was clicked
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.CurrentIndex">
            <summary>
            Gets the current index of the CallTip's overload list
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.NewIndex">
            <summary>
            Gets/Sets the new index of the CallTip's overload list
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.OverloadList">
            <summary>
            Returns the OverLoad list of the CallTip
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.Cancel">
            <summary>
            Gets/Sets if the CallTip should be hidden
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.HighlightStart">
            <summary>
            Gets/Sets the start position of the CallTip's highlighted portion of text
            </summary>
        </member>
        <member name="P:ScintillaNet.CallTipClickEventArgs.HighlightEnd">
            <summary>
            Gets/Sets the end position of the CallTip's highlighted portion of text
            </summary>
        </member>
        <member name="T:ScintillaNet.CharAddedEventArgs">
            <summary>
            Provides data for the CharAdded event
            </summary>
        </member>
        <member name="M:ScintillaNet.CharAddedEventArgs.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the CharAddedEventArgs class.
            </summary>
            <param name="ch">The character that was added</param>
        </member>
        <member name="P:ScintillaNet.CharAddedEventArgs.Ch">
            <summary>
            Returns the character that was added
            </summary>
        </member>
        <member name="T:ScintillaNet.FoldChangedEventArgs">
            <summary>
            Provides data for the FoldChanged event
            </summary>
        </member>
        <member name="T:ScintillaNet.ModifiedEventArgs">
            <summary>
            Base class for modified events
            </summary>
            <remarks>
            ModifiedEventArgs is the base class for all events that are fired 
            in response to an SCN_MODIFY notification message. They all have 
            the Undo/Redo flags in common and I'm also including the raw 
            modificationType integer value for convenience purposes.
            </remarks>
        </member>
        <member name="M:ScintillaNet.FoldChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FoldChangedEventArgs class.
            </summary>
            <param name="line">Line # that the fold change occured on</param>
            <param name="newFoldLevel">new Fold Level of the line</param>
            <param name="previousFoldLevel">previous Fold Level of the line</param>
            <param name="modificationType">What kind of fold modification occured</param>
        </member>
        <member name="P:ScintillaNet.FoldChangedEventArgs.Line">
            <summary>
            Gets/Sets the Line # that the fold change occured on
            </summary>
        </member>
        <member name="P:ScintillaNet.FoldChangedEventArgs.NewFoldLevel">
            <summary>
            Gets the new Fold Level of the line
            </summary>
        </member>
        <member name="P:ScintillaNet.FoldChangedEventArgs.PreviousFoldLevel">
            <summary>
            Gets the previous Fold Level of the line
            </summary>
        </member>
        <member name="T:ScintillaNet.LinesNeedShownEventArgs">
            <summary>
            Provides data for the LinesNeedShown event
            </summary>
        </member>
        <member name="M:ScintillaNet.LinesNeedShownEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LinesNeedShownEventArgs class.
            </summary>
            <param name="startLine">the first (top) line that needs to be shown</param>
            <param name="endLine">the last (bottom) line that needs to be shown</param>
        </member>
        <member name="P:ScintillaNet.LinesNeedShownEventArgs.FirstLine">
            <summary>
            Returns the first (top) line that needs to be shown
            </summary>
        </member>
        <member name="P:ScintillaNet.LinesNeedShownEventArgs.LastLine">
            <summary>
            Returns the last (bottom) line that needs to be shown
            </summary>
        </member>
        <member name="T:ScintillaNet.MarkerChangedEventArgs">
            <summary>
            Provides data for the MarkerChanged event
            </summary>
        </member>
        <member name="M:ScintillaNet.MarkerChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LinesNeedShownEventArgs class.
            </summary>
            <param name="line">Line number where the marker change occured</param>
            <param name="modificationType">What type of Scintilla modification occured</param>
        </member>
        <member name="P:ScintillaNet.MarkerChangedEventArgs.Line">
            <summary>
            Returns the line number where the marker change occured
            </summary>
        </member>
        <member name="T:ScintillaNet.NativeScintillaEventArgs">
            <summary>
            Provides data for native Scintilla Events
            </summary>
            <remarks>
            All events fired from the INativeScintilla Interface uses
            NativeScintillaEventArgs. Msg is a copy
            of the Notification Message sent to Scintilla's Parent WndProc
            and SCNotification is the SCNotification Struct pointed to by 
            Msg's lParam. 
            </remarks>
        </member>
        <member name="M:ScintillaNet.NativeScintillaEventArgs.#ctor(System.Windows.Forms.Message,ScintillaNet.SCNotification)">
            <summary>
            Initializes a new instance of the NativeScintillaEventArgs class.
            </summary>
            <param name="msg">Notification Message sent from the native Scintilla</param>
            <param name="notification">SCNotification structure sent from Scintilla that contains the event data</param>
        </member>
        <member name="P:ScintillaNet.NativeScintillaEventArgs.Msg">
            <summary>
            Notification Message sent from the native Scintilla
            </summary>
        </member>
        <member name="P:ScintillaNet.NativeScintillaEventArgs.SCNotification">
            <summary>
            SCNotification structure sent from Scintilla that contains the event data
            </summary>
        </member>
        <member name="T:ScintillaNet.ScintillaMouseEventArgs">
            <summary>
            Provides data for Scintilla mouse events
            </summary>
        </member>
        <member name="M:ScintillaNet.ScintillaMouseEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ScintillaMouseEventArgs class.
            </summary>
            <param name="x">X (left) position of mouse in pixels</param>
            <param name="y">Y (top) position of mouse in pixels</param>
            <param name="position"> Document position</param>
        </member>
        <member name="P:ScintillaNet.ScintillaMouseEventArgs.X">
            <summary>
            Returns the X (left) position of mouse in pixels
            </summary>
        </member>
        <member name="P:ScintillaNet.ScintillaMouseEventArgs.Y">
            <summary>
            Returns the Y (top) position of mouse in pixels
            </summary>
        </member>
        <member name="P:ScintillaNet.ScintillaMouseEventArgs.Position">
            <summary>
            Returns the Document position
            </summary>
        </member>
        <member name="T:ScintillaNet.StyleChangedEventArgs">
            <summary>
            Provides data for the StyleChanged event
            </summary>
            <remarks>
            StyleChangedEventHandler is used for the StyleChanged Event which is also used as 
            a more specific abstraction around the SCN_MODIFIED notification message.
            </remarks>
        </member>
        <member name="P:ScintillaNet.StyleChangedEventArgs.Position">
            <summary>
            Returns the starting document position where the style has been changed
            </summary>
        </member>
        <member name="P:ScintillaNet.StyleChangedEventArgs.Length">
            <summary>
            Returns how many characters have changed
            </summary>
        </member>
        <member name="T:ScintillaNet.StyleNeededEventArgs">
            <summary>
            Provides data for the StyleNeeded event
            </summary>
        </member>
        <member name="M:ScintillaNet.StyleNeededEventArgs.#ctor(ScintillaNet.Range)">
            <summary>
            Initializes a new instance of the StyleNeededEventArgs class.
            </summary>
            <param name="range">the document range that needs styling</param>
        </member>
        <member name="P:ScintillaNet.StyleNeededEventArgs.Range">
            <summary>
            Returns the document range that needs styling
            </summary>
        </member>
        <member name="T:ScintillaNet.TextModifiedEventArgs">
            <summary>
            Provices data for the TextModified event
            </summary>
            <remarks>
            TextModifiedEventHandler is used as an abstracted subset of the
            SCN_MODIFIED notification message. It's used whenever the SCNotification's
            modificationType flags are SC_MOD_INSERTTEXT ,SC_MOD_DELETETEXT, 
            SC_MOD_BEFOREINSERT and SC_MOD_BEFORE_DELETE. They all use a 
            TextModifiedEventArgs which corresponds to a subset of the 
            SCNotification struct having to do with these modification types.
            </remarks>
        </member>
        <member name="M:ScintillaNet.TextModifiedEventArgs.ToString">
            <summary>
            Overriden.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.TextModifiedEventArgs.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the TextModifiedEventArgs class.
            </summary>
            <param name="position">document position where the change occured</param>
            <param name="length">length of the change occured</param>
            <param name="linesAddedCount">the # of lines added or removed as a result of the change</param>
            <param name="text">affected text of the change</param>
            <param name="isUserChange">true if the change was a direct result of user interaction</param>
            <param name="markerChangedLine"> the line # of where the marker change occured (if applicable)</param>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.IsUserChange">
            <summary>
            Returns true if the change was a direct result of user interaction
            </summary>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.MarkerChangedLine">
            <summary>
            Returns the line # of where the marker change occured (if applicable)
            </summary>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.Position">
            <summary>
            Returns the document position where the change occured
            </summary>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.Length">
            <summary>
            Returns the length of the change occured. 
            </summary>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.LinesAddedCount">
            <summary>
            Returns the # of lines added or removed as a result of the change
            </summary>
        </member>
        <member name="P:ScintillaNet.TextModifiedEventArgs.Text">
            <summary>
            The affected text of the change
            </summary>
        </member>
        <member name="T:ScintillaNet.UndoRedoFlags">
            <summary>
            Contains Undo/Redo information, used by many of the events
            </summary>
        </member>
        <member name="F:ScintillaNet.UndoRedoFlags.IsUndo">
            <summary>
            Was this action the result of an undo action
            </summary>
        </member>
        <member name="F:ScintillaNet.UndoRedoFlags.IsRedo">
            <summary>
            Was this action the result of a redo action
            </summary>
        </member>
        <member name="F:ScintillaNet.UndoRedoFlags.IsMultiStep">
            <summary>
            Is this part of a multiple undo or redo
            </summary>
        </member>
        <member name="F:ScintillaNet.UndoRedoFlags.IsLastStep">
            <summary>
            Is this the last step in an undi or redo
            </summary>
        </member>
        <member name="F:ScintillaNet.UndoRedoFlags.IsMultiLine">
            <summary>
            Does this affect multiple lines
            </summary>
        </member>
        <member name="M:ScintillaNet.UndoRedoFlags.ToString">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScintillaNet.UndoRedoFlags.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the UndoRedoFlags structure.
            </summary>
            <param name="isUndo">Was this action the result of an undo action</param>
            <param name="isRedo">Was this action the result of a redo action</param>
            <param name="isMultiStep">Is this part of a multiple undo or redo</param>
            <param name="isLastStep">Is this the last step in an undi or redo</param>
            <param name="isMultiLine">Does this affect multiple lines</param>
        </member>
        <member name="T:ScintillaNet.UriDroppedEventArgs">
            <summary>
            Provides data for the UriDropped event
            </summary>
        </member>
        <member name="M:ScintillaNet.UriDroppedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UriDroppedEventArgs class.
            </summary>
            <param name="uriText">Text of the dropped file or uri</param>
        </member>
        <member name="P:ScintillaNet.UriDroppedEventArgs.UriText">
            <summary>
            Text of the dropped file or uri
            </summary>
        </member>
        <member name="T:ScintillaNet.AutoCompleteAcceptedEventArgs">
            <summary>
            Provides data for the AutoCompleteAccepted event
            </summary>
        </member>
        <member name="M:ScintillaNet.AutoCompleteAcceptedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoCompleteAcceptedEventArgs class.
            </summary>
            <param name="text">Text of the selected autocomplete entry selected</param>
        </member>
        <member name="P:ScintillaNet.AutoCompleteAcceptedEventArgs.Text">
            <summary>
            Text of the selected autocomplete entry selected
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoCompleteAcceptedEventArgs.WordStartPosition">
            <summary>
            Returns the start position of the current word in the document.
            </summary>
            <remarks>
            This controls how many characters of the selected autocomplete entry
            is actually inserted into the document
            </remarks>
        </member>
        <member name="P:ScintillaNet.AutoCompleteAcceptedEventArgs.Cancel">
            <summary>
            Gets/Sets if the autocomplete action should be cancelled
            </summary>
        </member>
        <member name="T:ScintillaNet.MarginClickEventArgs">
            <summary>
            Provides data for the MarginClick event
            </summary>
        </member>
        <member name="M:ScintillaNet.MarginClickEventArgs.#ctor(System.Windows.Forms.Keys,System.Int32,ScintillaNet.Line,ScintillaNet.Margin,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the MarginClickEventArgs class.
            </summary>
            <param name="modifiers">any Modifier keys (shift, alt, ctrl) that were in use at the
            time the click event occured</param>
            <param name="position">Document position of the line where the click occured</param>
            <param name="line">Document line # where the click occured</param>
            <param name="margin">Margin where the click occured</param>
            <param name="toggleMarkerNumber"> marker number that should be toggled in result of the click</param>
            <param name="toggleFold">Whether the fold at the current line should be toggled</param>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.Modifiers">
            <summary>
            Returns any Modifier keys (shift, alt, ctrl) that were in use at the
            time the click event occured
            </summary>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.Position">
            <summary>
            Returns the Document position of the line where the click occured
            </summary>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.Line">
            <summary>
            Returns the Document line # where the click occured
            </summary>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.Margin">
            <summary>
            Returns the Margin where the click occured
            </summary>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.ToggleMarkerNumber">
            <summary>
            Gets/Sets the marker number that should be toggled in result of the click
            </summary>
        </member>
        <member name="P:ScintillaNet.MarginClickEventArgs.ToggleFold">
            <summary>
            Gets/Sets whether the fold at the current line should be toggled
            </summary>
        </member>
        <member name="T:ScintillaNet.MacroRecordEventArgs">
            <summary>
            Provides data for the MacroRecorded event
            </summary>
        </member>
        <member name="M:ScintillaNet.MacroRecordEventArgs.#ctor(System.Windows.Forms.Message)">
            <summary>
            Initializes a new instance of the MacroRecordEventArgs class.
            </summary>
            <param name="recordedMessage">the recorded window message that can be sent back to the native Scintilla window</param>
        </member>
        <member name="M:ScintillaNet.MacroRecordEventArgs.#ctor(ScintillaNet.NativeScintillaEventArgs)">
            <summary>
            Initializes a new instance of the MacroRecordEventArgs class.
            </summary>
            <param name="ea">NativeScintillaEventArgs object containing the message data</param>
        </member>
        <member name="P:ScintillaNet.MacroRecordEventArgs.RecordedMessage">
            <summary>
            Returns the recorded window message that can be sent back to the native Scintilla window
            </summary>
        </member>
        <member name="M:ScintillaNet.FileDropEventArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FileDropEventArgs class.
            </summary>
            <param name="fileNames"></param>
        </member>
        <member name="T:ScintillaNet.AutoComplete">
            <summary>
            Used to invoke AutoComplete and UserList windows. Also manages AutoComplete
            settings.
            </summary>
            <remarks>
            Autocomplete is typically used in IDEs to automatically complete some kind
            of identifier or keyword based on a partial name. 
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show(System.Int32,System.String)">
            <summary>
            Shows the autocomplete window.
            </summary>
            <param name="lengthEntered">Number of characters of the current word already entered in the editor </param>
            <param name="list">Sets the <see cref="P:ScintillaNet.AutoComplete.ListString"/> property. </param>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show">
            <summary>
            Shows the autocomplete window.
            </summary>
            <remarks>
            This overload assumes that the <see cref="P:ScintillaNet.AutoComplete.List"/> property has been
            set. The lengthEntered is automatically detected by the editor.
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show(System.String)">
            <summary>
            Shows the autocomplete window.
            </summary>
            <param name="list">Sets the <see cref="P:ScintillaNet.AutoComplete.ListString"/> property. </param>
            <remarks>
            In this overload the lengthEntered is automatically detected by the editor.
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shows the autocomplete window
            </summary>
            <param name="lengthEntered">Number of characters of the current word already entered in the editor </param>
            <param name="list">Sets the <see cref="P:ScintillaNet.AutoComplete.List"/> property. </param>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shows the autocomplete window
            </summary>
            <param name="list">Sets the <see cref="P:ScintillaNet.AutoComplete.List"/> property. </param>
            In this overload the lengthEntered is automatically detected by the editor.
        </member>
        <member name="M:ScintillaNet.AutoComplete.Show(System.Int32)">
            <summary>
            Shows the autocomplete window
            </summary>
            <param name="lengthEntered">Number of characters of the current word already entered in the editor </param>
            <remarks>
            This overload assumes that the <see cref="P:ScintillaNet.AutoComplete.List"/> property has been set.
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.ShowUserList(System.Int32,System.String)">
            <summary>
            Shows a UserList window
            </summary>
            <param name="listType">Index of the userlist to show. Can be any integer</param>
            <param name="list">List of words to show separated by " "</param>
            <remarks>
            UserLists are not as powerful as autocomplete but can be assigned to a user defined index.
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.ShowUserList(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shows a UserList window
            </summary>
            <param name="listType">Index of the userlist to show. Can be any integer</param>
            <param name="list">List of words to show.</param>
            <remarks>
            UserLists are not as powerful as autocomplete but can be assigned to a user defined index.
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Cancel">
            <summary>
            Cancels the autocomplete window
            </summary>
            <remarks>
            If the AutoComplete window is displayed calling Cancel() will close the window. 
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.Accept">
            <summary>
            Accepts the current AutoComplete window entry
            </summary>
            <remarks>
            If the AutoComplete window is open Accept() will close it. This also causes the
            <see cref="E:ScintillaNet.Scintilla.AutoCompleteAccepted"/> event to fire
            </remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImage(System.Int32,System.String)">
            <summary>
            Registers an image with index to be displayed in the AutoComplete window.
            </summary>
            <param name="type">Index of the image to register to</param>
            <param name="xpmImage">Image in the XPM image format</param>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImage(System.Int32,System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Registers an image with index to be displayed in the AutoComplete window.
            </summary>
            <param name="type">Index of the image to register to</param>
            <param name="xpmImage">Image to display in the XPM image format</param>
            <param name="transparentColor">Color to mask the image as transparent</param>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImage(System.Int32,System.Drawing.Bitmap)">
            <summary>
            Registers an image with index to be displayed in the AutoComplete window.
            </summary>
            <param name="type">Index of the image to register to</param>
            <param name="image">Image to display in Bitmap format</param>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImages(System.Collections.Generic.IList{System.String})">
            <summary>
            Registers a list of images to be displayed in the AutoComplete window.
            </summary>
            <param name="xpmImages">List of images in the XPM image format</param>
            <remarks>Indecis are assigned sequentially starting at 0</remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImages(System.Collections.Generic.IList{System.Drawing.Bitmap})">
            <summary>
            Registers a list of images to be displayed in the AutoComplete window.
            </summary>
            <param name="images">List of images in the Bitmap image format</param>
            <remarks>Indecis are assigned sequentially starting at 0</remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImages(System.Collections.Generic.IList{System.Drawing.Bitmap},System.Drawing.Color)">
            <summary>
            Registers a list of images to be displayed in the AutoComplete window.
            </summary>
            <param name="images">List of images in the Bitmap image format</param>
            <param name="transparentColor">Color to mask the image as transparent</param>
            <remarks>Indecis are assigned sequentially starting at 0</remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImages(System.Windows.Forms.ImageList)">
            <summary>
            Registers a list of images to be displayed in the AutoComplete window.
            </summary>
            <param name="images">List of images contained in an ImageList</param>
            <remarks>Indecis are assigned sequentially starting at 0</remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.RegisterImages(System.Windows.Forms.ImageList,System.Drawing.Color)">
            <summary>
            Registers a list of images to be displayed in the AutoComplete window.
            </summary>
            <param name="images">List of images contained in an ImageList</param>
            <param name="transparentColor">Color to mask the image as transparent</param>
            <remarks>Indecis are assigned sequentially starting at 0</remarks>
        </member>
        <member name="M:ScintillaNet.AutoComplete.ClearRegisteredImages">
            <summary>
            Deletes all registered images.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.List">
            <summary>
            List if words to display in the AutoComplete window when invoked.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.ListString">
            <summary>
            List if words to display in the AutoComplete window.
            </summary>
            <remarks>
             The list of words separated by <see cref="P:ScintillaNet.AutoComplete.ListSeparator"/> which
            is " " by default.
            </remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.IsActive">
            <summary>
            Returns wether or not the AutoComplete window is currently displayed
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.LastStartPosition">
            <summary>
            Gets the document posision when the AutoComplete window was last invoked
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.StopCharacters">
            <summary>
            List of characters (no separator) that causes the AutoComplete window to cancel.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.ListSeparator">
            <summary>
            Character used to split <see cref="P:ScintillaNet.AutoComplete.ListString"/> to convert to a List.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.SelectedText">
            <summary>
            Gets or Sets the Text of the currently selected AutoComplete item.
            </summary>
            <remarks>
            When setting this property it does not change the text of the currently
            selected item. Instead it searches the list for the given value and selects
            that item if it matches.
            </remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.SelectedIndex">
            <summary>
            Gets or Sets the index of the currently selected item in the AutoComplete <see cref="P:ScintillaNet.AutoComplete.List"/>
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.CancelAtStart">
            <summary>
            The default behavior is for the list to be cancelled if the caret moves before the location it was at when the list was displayed. 
            By setting this property to false, the list is not cancelled until the caret moves before the first character of the word being completed.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.FillUpCharacters">
            <summary>
            List of characters (no separated) that causes the AutoComplete window to accept the current
            selection.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.SingleLineAccept">
            <summary>
            If you set this value to true and a list has only one item, it is automatically added and no list is displayed. The default is to display the list even if there is only a single item.
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.IsCaseSensitive">
            <summary>
            Gets or Sets if the comparison of words to the AutoComplete <see cref="P:ScintillaNet.AutoComplete.List"/> are case sensitive.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.AutoHide">
            <summary>
            By default, the list is cancelled if there are no viable matches (the user has typed characters that no longer match a list entry). 
            If you want to keep displaying the original list, set AutoHide to false. 
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.DropRestOfWord">
            <summary>
            When an item is selected, any word characters following the caret are first erased if dropRestOfWord is set to true.
            </summary>
            <remarks>Defaults to false</remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.ImageSeparator">
            <summary>
            Autocompletion list items may display an image as well as text. Each image is first registered with an integer type. 
            Then this integer is included in the text of the list separated by a '?' from the text. For example, "fclose?2 fopen" 
            displays image 2 before the string "fclose" and no image before "fopen". 
            </summary>
        </member>
        <member name="P:ScintillaNet.AutoComplete.MaxHeight">
            <summary>
            Get or set the maximum number of rows that will be visible in an autocompletion list. If there are more rows in the list, then a vertical scrollbar is shown
            </summary>
            <remarks>Defaults to 5</remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.MaxWidth">
            <summary>
            Get or set the maximum width of an autocompletion list expressed as the number of characters in the longest item that will be totally visible. 
            </summary>
            <remarks>
            If zero (the default) then the list's width is calculated to fit the item with the most characters. Any items that cannot be fully displayed 
            within the available width are indicated by the presence of ellipsis.
            </remarks>
        </member>
        <member name="P:ScintillaNet.AutoComplete.AutomaticLengthEntered">
            <summary>
            Gets or Sets the last automatically calculated LengthEntered used whith <see cref="M:ScintillaNet.AutoComplete.Show(System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="T:ScintillaNet.Clipboard">
            <summary>
            Performs OS Clipboard acess.
            </summary>
        </member>
        <member name="M:ScintillaNet.Clipboard.Copy">
            <summary>
            Copies the currently selected text to the clipboard.
            </summary>
        </member>
        <member name="M:ScintillaNet.Clipboard.Copy(System.String)">
            <summary>
            Copies the given text to the clipboard
            </summary>
            <param name="text">Text to be copied</param>
        </member>
        <member name="M:ScintillaNet.Clipboard.Copy(ScintillaNet.Range)">
            <summary>
            Copies the contents of a given range to the clipboard.
            </summary>
            <param name="rangeToCopy">Range of text to copy</param>
        </member>
        <member name="M:ScintillaNet.Clipboard.Copy(System.Int32,System.Int32)">
            <summary>
            Copies text bounded by the given position
            </summary>
            <param name="positionStart">Start position in the document of text to copy</param>
            <param name="positionEnd">End position in the document of text to copy</param>
        </member>
        <member name="M:ScintillaNet.Clipboard.Cut">
            <summary>
            Cuts the currently selected text to the clipboard
            </summary>
        </member>
        <member name="M:ScintillaNet.Clipboard.Paste">
            <summary>
            Pastes the current content of the clipboard into the current document position
            </summary>
        </member>
        <member name="P:ScintillaNet.Clipboard.CanPaste">
            <summary>
            Returns true if a paste operation can occur.
            </summary>
        </member>
        <member name="P:ScintillaNet.Clipboard.ConvertEndOfLineOnPaste">
            <summary>
            Gets/Sets wether pasted text's end of line characters are automatically converted
            to match the document's.
            </summary>
            <remarks>This is the same as EndOfLine.ConvertOnPaste</remarks>
        </member>
        <member name="T:ScintillaNet.CaretInfo">
            <summary>
            Manages Caret Settings
            </summary>
            <remarks>
            The caret is the blinking line that indicates the current document position. This
            is sometimes referred to as cursor.
            </remarks>
        </member>
        <member name="M:ScintillaNet.CaretInfo.EnsureVisible">
            <summary>
            Scrolls the Scintilla window so that the Caret is visible.
            </summary>
        </member>
        <member name="M:ScintillaNet.CaretInfo.ChooseCaretX">
            <summary>
            Scintilla remembers the x value of the last position horizontally moved to explicitly by the user and this value is then 
            used when moving vertically such as by using the up and down keys. This method sets the current x position of the caret as 
            the remembered value.
            </summary>
        </member>
        <member name="M:ScintillaNet.CaretInfo.Goto(System.Int32)">
            <summary>
            Places the caret at the specified document position
            </summary>
            <param name="position">Position in the document to place the caret</param>
        </member>
        <member name="M:ScintillaNet.CaretInfo.BringIntoView">
            <summary>
            Places the caret somewhere within the document that is displayed in the
            Scintilla Window
            </summary>
            <remarks>
            If the caret is already visible in the current scrolled view this method does
            nothing.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.Width">
            <summary>
            Gets/Sets the width in pixels of the Caret
            </summary>
            <remarks>
            This defaults to the system default.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.Style">
            <summary>
            Gets/Sets the <see cref="T:ScintillaNet.CaretStyle"/> displayed.
            </summary>
        </member>
        <member name="P:ScintillaNet.CaretInfo.Color">
            <summary>
            Gets/Sets the color of the Caret.
            </summary>
            <remarks>Defaults to black</remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.CurrentLineBackgroundColor">
            <summary>
            Gets/Sets the color of the document line where the caret currently resides
            </summary>
            <remarks>
            The <see cref="!:HighlightCurrentList"/> property must be set to true in order
            for this to to take effect.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.HighlightCurrentLine">
            <summary>
            Gets/Sets if the current document line where the caret resides is highlighted.
            </summary>
            <remarks>
            <see cref="P:ScintillaNet.CaretInfo.CurrentLineBackgroundColor"/> determines the color. 
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.CurrentLineBackgroundAlpha">
            <summary>
            Gets/Sets the transparency alpha of the CurrentLine Background highlight
            </summary>
            <remarks>
            Values range from 0 to 256. Default is 256.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.BlinkRate">
            <summary>
            Gets/Sets the time interval in milliseconds that the caret should blink.
            </summary>
            <remarks>
            This defaults to the system default value.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.Position">
            <summary>
            Gets/Sets the current document position where the caret resides
            </summary>
        </member>
        <member name="P:ScintillaNet.CaretInfo.Anchor">
            <summary>
            Gets/Sets the current anchor position
            </summary>
            <remarks>
            If the anchor position is less than the Caret Position it acts as the start of
            the selection.
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.IsSticky">
            <summary>
            Controls when the last position of the caret on the line is saved. When set to true, the position is not saved when you type a character, a tab, paste the clipboard content or press backspace
            </summary>
            <remarks>
            Defaults to false
            </remarks>
        </member>
        <member name="P:ScintillaNet.CaretInfo.LineNumber">
            <summary>
            Gets/Sets the current Line Number that the caret resides.
            </summary>
        </member>
    </members>
</doc>
